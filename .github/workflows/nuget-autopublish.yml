name: nuget-autopublish-on-commit

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set git identity (for tagging)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Find version in commit messages
        id: ver
        run: |
          # Lies die letzten 50 Commit-Messages vom Push
          msgs=$(git log --format=%B -n 50)
          ver=$(printf "%s\n" "$msgs" \
            | grep -Eom1 'nuget:[[:space:]]*v?[0-9]+(\.[0-9]+){1,2}(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?' \
            | sed -E 's/^nuget:[[:space:]]*v?//')

          if [ -z "$ver" ]; then
            echo "found=false" >>"$GITHUB_OUTPUT"
            echo "No version marker found (use 'nuget: 1.2.3')."
          else
            echo "found=true" >>"$GITHUB_OUTPUT"
            echo "version=$ver" >>"$GITHUB_OUTPUT"
            echo "Detected version: $ver"
          fi


      - name: Stop when no version was found
        if: "${{ steps.ver.outputs.found != 'true' }}"
        run: echo "No version marker found in commit messages. Skipping publish."

      - name: Restore
        if: "${{ steps.ver.outputs.found == 'true' }}"
        run: dotnet restore

      - name: Build
        if: "${{ steps.ver.outputs.found == 'true' }}"
        run: dotnet build -c Release --no-restore

      - name: Pack
        if: "${{ steps.ver.outputs.found == 'true' }}"
        run: |
          if [ ! -f "$PROJECT_PATH" ]; then
            echo "Project not found: $PROJECT_PATH" >&2
            exit 1
          fi
          mkdir -p artifacts
          dotnet pack "$PROJECT_PATH" -c Release --no-build \
            -p:PackageVersion="${{ steps.ver.outputs.version }}" \
            -o ./artifacts

      - name: Create & push git tag
        if: "${{ steps.ver.outputs.found == 'true' }}"
        run: |
          TAG="v${{ steps.ver.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Push package to nuget.org
        if: "${{ steps.ver.outputs.found == 'true' }}"
        run: |
          for pkg in artifacts/*.nupkg; do
            [ -e "$pkg" ] || { echo "No .nupkg found in ./artifacts"; exit 1; }
            echo "Pushing $pkg ..."
            dotnet nuget push "$pkg" \
              --api-key "${{ secrets.NUGET_API_KEY }}" \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done
